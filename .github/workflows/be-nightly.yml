name: Photopixels BE nightly API tests

on:
  workflow_dispatch: {}
  schedule:
    - cron: '30 0 * * *'

env:
  AUTOMATION_REPO_PATH: automation
  BACKEND_REPO_PATH: backend
  COMPOSE_FILE: ${{ github.workspace }}/automation/utils/docker-compose.yml
  BACKEND_TAG: scalefocusad/photopixels-backend-net:automation
  AUTOMATION_TAG: scalefocusad/photopixels-automated-tests:automation

jobs:
  build-be:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-backend-net
          submodules: recursive
          fetch-depth: 0
          path: ${{ env.BACKEND_REPO_PATH }}
      - name: Build docker image (BE)
        working-directory: ${{ env.BACKEND_REPO_PATH }}
        run: |
          docker build \
            --no-cache \
            --build-arg VERSION="1.0.0" \
            --build-arg VERSION_SUFFIX="" \
            -t "$BACKEND_TAG" \
            -f ./src/SF.PhotoPixels.API/Dockerfile .

  build-automation:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Build docker image (automation tests)
        working-directory: ${{ env.AUTOMATION_REPO_PATH }}
        run: |
          docker build --no-cache -f ./Dockerfile -t "$AUTOMATION_TAG" .

  automation:
    runs-on: self-hosted
    needs: [build-be, build-automation]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Start environment
        run: |
          chmod +x "${{ env.AUTOMATION_REPO_PATH }}/utils/create-environment.sh"
          "${{ env.AUTOMATION_REPO_PATH }}/utils/create-environment.sh" "${COMPOSE_FILE}"
      - name: Run API tests
        id: run-tests
        continue-on-error: true
        run: |
          docker run -i --name api-tests \
            -e BASE_URI="http://backend:8080/" \
            -e SUITE_NAME="api" \
            --network utils_sf-photos-net \
            "$AUTOMATION_TAG"
      - name: Collect test artifacts
        if: always()
        run: |
          set -e
          mkdir -p "${GITHUB_WORKSPACE}/test-artifacts"
          docker cp api-tests:/app/target/surefire-reports "${GITHUB_WORKSPACE}/test-artifacts/surefire-reports" || true
          docker cp api-tests:/app/target/allure-results   "${GITHUB_WORKSPACE}/test-artifacts/allure-results"   || true
      - name: Upload raw artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: be-api-test-artifacts
          path: test-artifacts/**
          if-no-files-found: warn
          retention-days: 14
      - name: Cleanup
        if: always()
        run: |
          docker rm -f api-tests || true
          docker compose -f "$COMPOSE_FILE" down -v || true

  allure-report-email:
    runs-on: self-hosted
    needs: [automation]
    if: always()
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: be-api-test-artifacts
          path: ./test-artifacts
      - name: Generate Allure report
        id: gen
        continue-on-error: true
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: ./test-artifacts/allure-results
          allure_report: ./allure-report
      - name: Extract summary stats (Python)
        id: summary
        shell: bash
        run: |
          python3 - << 'PY'
          import json, os
          summary_path = os.path.join('allure-report','widgets','summary.json')
          passed=failed=broken=skipped=total=0
          if os.path.exists(summary_path):
            with open(summary_path,'r',encoding='utf-8') as f:
              data=json.load(f)
              stat=data.get('statistic',{})
              passed=int(stat.get('passed',0))
              failed=int(stat.get('failed',0))
              broken=int(stat.get('broken',0))
              skipped=int(stat.get('skipped',0))
              total=int(stat.get('total',0))
          verdict = "FAILED" if (failed + broken) > 0 else "PASSED"
          with open(os.environ['GITHUB_OUTPUT'],'a') as out:
            out.write(f"passed={passed}\n")
            out.write(f"failed={failed}\n")
            out.write(f"broken={broken}\n")
            out.write(f"skipped={skipped}\n")
            out.write(f"total={total}\n")
            out.write(f"verdict={verdict}\n")
          PY
      - name: Zip Allure report (Python)
        run: |
          python3 - << 'PY'
          import os, zipfile
          report_dir='allure-report'
          zip_path='allure-report.zip'
          if not os.path.isdir(report_dir):
              os.makedirs(report_dir, exist_ok=True)
              with open(os.path.join(report_dir,'README.txt'),'w') as f:
                  f.write('No report available')
          with zipfile.ZipFile(zip_path,'w',zipfile.ZIP_DEFLATED) as z:
              for root,_,files in os.walk(report_dir):
                  for fn in files:
                      p=os.path.join(root,fn)
                      z.write(p, os.path.relpath(p, report_dir))
          PY
      - name: Upload Allure HTML as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: |
            allure-report/**
            allure-report.zip
          retention-days: 14
      - name: Send email with Allure report
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SENDER }}
          to: ${{ secrets.RECIPIENTS }}
          subject: "Photopixels BE nightly API tests â€” ${{ steps.summary.outputs.verdict || 'PASSED' }}"
          html_body: |
            <p>Hello team,</p>
            <p>The nightly run finished with status: <b>${{ steps.summary.outputs.verdict || 'PASSED' }}</b>.</p>
            <p>Summary:</p>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse:collapse;">
              <tr>
                <th>Total</th>
                <th>Passed</th>
                <th>Failed</th>
                <th>Broken</th>
                <th>Skipped</th>
              </tr>
              <tr>
                <td align="center">${{ steps.summary.outputs.total || '0' }}</td>
                <td align="center" style="color:green;">${{ steps.summary.outputs.passed || '0' }}</td>
                <td align="center" style="color:red;">${{ steps.summary.outputs.failed || '0' }}</td>
                <td align="center" style="color:orange;">${{ steps.summary.outputs.broken || '0' }}</td>
                <td align="center" style="color:gray;">${{ steps.summary.outputs.skipped || '0' }}</td>
              </tr>
            </table>
            <p>
              <ul>
                <li>Workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">link</a></li>
                <li>Artifacts: <i>be-api-test-artifacts</i> and <i>allure-html-report</i></li>
              </ul>
            </p>
            <p>The attached file contains the HTML Allure report (unzip and open <code>index.html</code>).</p>
            <p>Best regards,<br/>CI</p>
          attachments: allure-report.zip
