name: Photopixels BE nightly API tests

on:
  workflow_dispatch: {}
  schedule:
    - cron: '00 12 * * *'

env:
  COMPOSE_FILE: ./utils/docker-compose.yml
  BACKEND_TAG: scalefocusad/photopixels-backend-net:automation
  AUTOMATION_TAG: scalefocusad/photopixels-automated-tests:automation

jobs:
  build-be:
    runs-on: self-hosted
    steps:
      - name: Pre-clean workspace (safe ownership + wipe)
        run: |
          sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
          sudo find "$GITHUB_WORKSPACE" -mindepth 1 -maxdepth 1 -exec rm -rf {} + || true
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-backend-net
          submodules: recursive
          clean: false
          fetch-depth: 0
      - name: Build docker image (BE)
        run: |
          docker build \
            --no-cache \
            --build-arg VERSION="1.0.0" \
            --build-arg VERSION_SUFFIX="" \
            -t "$BACKEND_TAG" \
            -f ./src/SF.PhotoPixels.API/Dockerfile .

  build-automation:
    runs-on: self-hosted
    steps:
      - name: Pre-clean workspace (safe ownership + wipe)
        run: |
          sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
          sudo find "$GITHUB_WORKSPACE" -mindepth 1 -maxdepth 1 -exec rm -rf {} + || true
      - uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 0
      - name: Build docker image (automation tests)
        run: |
          docker build --no-cache -f ./Dockerfile -t "$AUTOMATION_TAG" .

  automation:
    runs-on: self-hosted
    needs: [build-be, build-automation]
    steps:
      - name: Pre-clean workspace (safe ownership + wipe)
        run: |
          sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
          sudo find "$GITHUB_WORKSPACE" -mindepth 1 -maxdepth 1 -exec rm -rf {} + || true
      - uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 0
      - name: Start environment
        run: |
          chmod +x "${GITHUB_WORKSPACE}/utils/create-environment.sh"
          "${GITHUB_WORKSPACE}/utils/create-environment.sh" "${COMPOSE_FILE}"
      - name: Run API tests
        id: run-tests
        run: |
          set -e
          docker run -i --name api-tests \
            -e BASE_URI="http://backend:8080/" \
            -e SUITE_NAME="api" \
            --network utils_sf-photos-net \
            "$AUTOMATION_TAG"
      - name: Collect test artifacts
        if: always()
        run: |
          set -e
          mkdir -p "${GITHUB_WORKSPACE}/test-artifacts"
          docker cp api-tests:/app/target/surefire-reports "${GITHUB_WORKSPACE}/test-artifacts/surefire-reports" || true
          docker cp api-tests:/app/target/allure-results   "${GITHUB_WORKSPACE}/test-artifacts/allure-results"   || true
      - name: Upload raw artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: be-api-test-artifacts
          path: test-artifacts/**
          if-no-files-found: warn
          retention-days: 14
      - name: Cleanup
        if: always()
        run: |
          docker rm -f api-tests || true
          docker compose -f "$COMPOSE_FILE" down -v || true

  allure-report-email:
    runs-on: self-hosted
    needs: [automation]
    if: always()
    steps:
      - name: Pre-clean workspace (safe ownership + wipe)
        run: |
          sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
          sudo find "$GITHUB_WORKSPACE" -mindepth 1 -maxdepth 1 -exec rm -rf {} + || true
      - uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 0
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: be-api-test-artifacts
          path: ./test-artifacts
      - name: Ensure jq present
        run: |
          set -e
          if command -v jq >/dev/null 2>&1; then exit 0; fi
          if command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq && exit 0; fi
          if command -v yum >/dev/null 2>&1; then sudo yum install -y epel-release || true; sudo yum install -y jq && exit 0; fi
          if command -v dnf >/dev/null 2>&1; then sudo dnf install -y jq && exit 0; fi
          if command -v zypper >/dev/null 2>&1; then sudo zypper refresh && sudo zypper install -y jq && exit 0; fi
          if command -v apk >/dev/null 2>&1; then sudo apk add --no-cache jq && exit 0; fi
          curl -fsSL -o /tmp/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x /tmp/jq
          sudo mv /tmp/jq /usr/local/bin/jq
      - name: Generate Allure report
        id: gen
        continue-on-error: true
        env:
          REPORT_DIR: ${{ runner.temp }}/allure-report
        run: |
          mkdir -p "$REPORT_DIR"
          npx --yes allure-commandline generate ./test-artifacts/allure-results --clean -o "$REPORT_DIR" || true
      - name: Extract summary stats
        id: summary
        continue-on-error: true
        env:
          REPORT_DIR: ${{ runner.temp }}/allure-report
        run: |
          set -e
          f="$REPORT_DIR/widgets/summary.json"
          if [ -f "$f" ]; then
            passed=$(jq '.statistic.passed' "$f")
            failed=$(jq '.statistic.failed' "$f")
            broken=$(jq '.statistic.broken' "$f")
            skipped=$(jq '.statistic.skipped' "$f")
            total=$(jq '.statistic.total' "$f")
          else
            passed=0; failed=0; broken=0; skipped=0; total=0
          fi
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "broken=$broken" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT
      - name: Zip Allure report
        env:
          REPORT_DIR: ${{ runner.temp }}/allure-report
        run: |
          if [ -d "$REPORT_DIR" ]; then
            cd "$REPORT_DIR"
            zip -qr "$GITHUB_WORKSPACE/allure-report.zip" .
          else
            mkdir -p "$REPORT_DIR" && echo "No report available" > "$REPORT_DIR/README.txt"
            cd "$REPORT_DIR"
            zip -qr "$GITHUB_WORKSPACE/allure-report.zip" .
          fi
      - name: Upload Allure HTML as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: |
            ${{ runner.temp }}/allure-report/**
            allure-report.zip
          retention-days: 14
      - name: Send email with Allure report
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: "Photopixels Test <photopixel.test@scalefocus.com>"
          to: "martin.georgiev@scalefocus.com"
          subject: "Photopixels BE nightly API tests â€” ${{ needs.automation.result || 'success' }}"
          html_body: |
            <p>Hello team,</p>
            <p>The nightly run finished with status: <b>${{ needs.automation.result || 'success' }}</b>.</p>
            <p>Summary:</p>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse:collapse;">
              <tr>
                <th>Total</th>
                <th>Passed</th>
                <th>Failed</th>
                <th>Broken</th>
                <th>Skipped</th>
              </tr>
              <tr>
                <td align="center">${{ steps.summary.outputs.total || '0' }}</td>
                <td align="center" style="color:green;">${{ steps.summary.outputs.passed || '0' }}</td>
                <td align="center" style="color:red;">${{ steps.summary.outputs.failed || '0' }}</td>
                <td align="center" style="color:orange;">${{ steps.summary.outputs.broken || '0' }}</td>
                <td align="center" style="color:gray;">${{ steps.summary.outputs.skipped || '0' }}</td>
              </tr>
            </table>
            <p>
              <ul>
                <li>Workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">link</a></li>
                <li>Artifacts: <i>be-api-test-artifacts</i> and <i>allure-html-report</i></li>
              </ul>
            </p>
            <p>The attached file contains the HTML Allure report (unzip and open <code>index.html</code>).</p>
            <p>Best regards,<br/>CI</p>
          attachments: allure-report.zip
