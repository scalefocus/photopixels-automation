name: Photopixels BE nightly API tests
run-name: "Nightly BE API â€” ${{ github.ref_name }} #${{ github.run_number }}"

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 14 * * *'

env:
  AUTOMATION_REPO_PATH: automation
  BACKEND_REPO_PATH: backend
  COMPOSE_FILE: ${{ github.workspace }}/automation/utils/docker-compose.yml
  BACKEND_TAG: scalefocusad/photopixels-backend-net:automation
  AUTOMATION_TAG: scalefocusad/photopixels-automated-tests:automation

jobs:
  free-space:
    runs-on: self-hosted
    steps:
      - name: Show disk before
        run: |
          df -h || true
          docker system df || true
      - name: Docker prune
        run: |
          docker stop $(docker ps -q) 2>/dev/null || true
          docker system prune -af --volumes || true
          docker builder prune -af || true
      - name: Clean temp folders
        run: |
          rm -rf "$RUNNER_TEMP"/* || true
          mkdir -p "$RUNNER_TEMP"
      - name: Show disk after
        run: |
          df -h || true
          docker system df || true

  build-be:
    runs-on: self-hosted
    needs: [free-space]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-backend-net
          submodules: recursive
          fetch-depth: 0
          path: ${{ env.BACKEND_REPO_PATH }}
          clean: true
      - name: Build docker image (BE)
        working-directory: ${{ env.BACKEND_REPO_PATH }}
        run: |
          docker build \
            --no-cache \
            --build-arg VERSION="1.0.0" \
            --build-arg VERSION_SUFFIX="" \
            -t "$BACKEND_TAG" \
            -f ./src/SF.PhotoPixels.API/Dockerfile .

  build-automation:
    runs-on: self-hosted
    needs: [free-space]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
          clean: true
      - name: Build docker image (automation tests)
        working-directory: ${{ env.AUTOMATION_REPO_PATH }}
        run: |
          docker build --no-cache -f ./Dockerfile -t "$AUTOMATION_TAG" .

  automation:
    runs-on: self-hosted
    needs: [build-be, build-automation]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Start environment
        run: |
          chmod +x "${{ env.AUTOMATION_REPO_PATH }}/utils/create-environment.sh"
          "${{ env.AUTOMATION_REPO_PATH }}/utils/create-environment.sh" "${COMPOSE_FILE}"
      - name: Run API tests
        id: run-tests
        continue-on-error: true
        run: |
          docker run -i --name api-tests \
            -e BASE_URI="http://backend:8080/" \
            -e SUITE_NAME="api" \
            --network utils_sf-photos-net \
            "$AUTOMATION_TAG"
      - name: Collect test artifacts
        if: always()
        run: |
          set -e
          mkdir -p "${GITHUB_WORKSPACE}/test-artifacts"
          docker cp api-tests:/app/target/surefire-reports "${GITHUB_WORKSPACE}/test-artifacts/surefire-reports" || true
          docker cp api-tests:/app/target/allure-results   "${GITHUB_WORKSPACE}/test-artifacts/allure-results"   || true
      - name: Upload raw artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: be-api-test-artifacts
          path: test-artifacts/**
          if-no-files-found: warn
          retention-days: 14
      - name: Cleanup
        if: always()
        run: |
          docker rm -f api-tests || true
          docker compose -f "$COMPOSE_FILE" down -v || true

  allure-report-email:
    runs-on: self-hosted
    needs: [automation]
    if: always()
    steps:
      - name: Init temp paths
        run: |
          echo "ART_DIR=$RUNNER_TEMP/be-artifacts" >> "$GITHUB_ENV"
          echo "REPORT_DIR=$RUNNER_TEMP/allure-report" >> "$GITHUB_ENV"
          mkdir -p "$RUNNER_TEMP/be-artifacts" "$RUNNER_TEMP/allure-report"

      - name: Prep artifact dir
        run: |
          rm -rf "$ART_DIR" && mkdir -p "$ART_DIR"

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: be-api-test-artifacts
          path: ${{ env.ART_DIR }}

      - name: Generate Allure report
        id: gen
        continue-on-error: true
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: ${{ env.ART_DIR }}/allure-results
          allure_report: ${{ env.REPORT_DIR }}

      - name: Extract summary and failed table (prefer Allure JSON, fallback JUnit)
        id: summary
        shell: bash
        run: |
          python3 - << 'PY'
          import os, json, glob, html, re, xml.etree.ElementTree as ET

          def esc(s): return html.escape(s or '')

          report_dir = os.environ['REPORT_DIR']
          art_dir = os.environ['ART_DIR']
          allure_results = os.path.join(art_dir,'allure-results')
          surefire_dir   = os.path.join(art_dir,'surefire-reports')

          passed = failed = broken = skipped = total = 0
          rows = []

          for path in glob.glob(os.path.join(allure_results,'*-result.json')):
              try:
                  with open(path,'r',encoding='utf-8') as f:
                      obj = json.load(f)
                  st = (obj.get('status','') or '').lower()
                  if   st == 'passed':  passed += 1
                  elif st == 'failed':  failed += 1
                  elif st == 'skipped': skipped += 1
                  elif st == 'broken':  broken += 1
                  else: pass
                  total += 1
                  if st in ('failed','broken'):
                      labels = { (l.get('name') or ''): (l.get('value') or '') for l in obj.get('labels',[]) }
                      pkg = labels.get('package','')
                      testClass = labels.get('testClass','')
                      cls = testClass or pkg
                      name = obj.get('name') or 'Unnamed'
                      msg = (obj.get('statusDetails',{}) or {}).get('message') or (obj.get('statusDetails',{}) or {}).get('trace') or ''
                      msg = (msg or '').strip()
                      first = msg.splitlines()[0][:500]
                      rows.append(f"<tr><td><code>{esc(cls)}#{esc(name)}</code></td><td>{esc(first)}</td></tr>")
              except Exception:
                  pass

          def parse_testsuite(ts):
              nonlocal passed, failed, broken, skipped, total, rows
              try:
                  t = int(ts.attrib.get('tests', 0)); f = int(ts.attrib.get('failures', 0)); e = int(ts.attrib.get('errors', 0)); sk = int(ts.attrib.get('skipped', 0))
                  if total == 0:
                      total += t
                  for tc in ts.findall('.//testcase'):
                      name = tc.attrib.get('name',''); cls = tc.attrib.get('classname','')
                      fnode = tc.find('failure'); enode = tc.find('error'); sknode = tc.find('skipped')
                      if fnode is not None:
                          if not rows:
                              pass
                          msg = fnode.attrib.get('message') or (fnode.text or '')
                          rows.append(f"<tr><td><code>{esc(cls)}#{esc(name)}</code></td><td>{esc((msg or '').strip().splitlines()[0][:500])}</td></tr>")
                      elif enode is not None:
                          msg = enode.attrib.get('message') or (enode.text or '')
                          rows.append(f"<tr><td><code>{esc(cls)}#{esc(name)}</code></td><td>{esc((msg or '').strip().splitlines()[0][:500])}</td></tr>")
                  if total and (failed+broken+skipped+passed)==0:
                      pass
              except Exception:
                  pass

          if total == 0 and os.path.isdir(surefire_dir):
              for path in glob.glob(os.path.join(surefire_dir,'TEST-*.xml')):
                  try:
                      root = ET.parse(path).getroot()
                      if root.tag == 'testsuite':
                          parse_testsuite(root)
                      elif root.tag == 'testsuites':
                          for ts in root.findall('testsuite'):
                              parse_testsuite(ts)
                  except Exception:
                      pass

          if total and passed == 0:
              p = total - (failed + broken + skipped)
              passed = p if p > 0 else 0

          verdict = "FAILED" if (failed + broken) > 0 or len(rows) > 0 else "PASSED"

          failed_table_html = (
              '<table border="1" cellpadding="6" cellspacing="0" style="border-collapse:collapse;width:100%;">'
              '<tr><th style="text-align:left;">Test</th><th style="text-align:left;">Message</th></tr>'
              + "".join(rows) +
              '</table>'
          ) if rows else '<p>No failed tests.</p>'

          failed_table_html = re.sub(r"\\s+", " ", failed_table_html).strip()

          with open(os.environ['GITHUB_OUTPUT'],'a') as out:
              out.write(f"passed={passed}\\n")
              out.write(f"failed={failed}\\n")
              out.write(f"broken={broken}\\n")
              out.write(f"skipped={skipped}\\n")
              out.write(f"total={total}\\n")
              out.write(f"verdict={verdict}\\n")
              out.write("failed_table_html<<EOF\\n")
              out.write(failed_table_html + "\\n")
              out.write("EOF\\n")
          PY

      - name: Build ZIP (Allure if present, else raw artifacts)
        run: |
          python3 - << 'PY'
          import os, zipfile, shutil
          report_dir=os.environ['REPORT_DIR']
          art_dir=os.environ['ART_DIR']
          zip_path='allure-report.zip'
          has_index=os.path.isfile(os.path.join(report_dir,'index.html'))
          if not has_index:
              fallback_dir=os.path.join(report_dir,'_fallback')
              os.makedirs(fallback_dir, exist_ok=True)
              ar=os.path.join(art_dir,'allure-results')
              sr=os.path.join(art_dir,'surefire-reports')
              if os.path.isdir(ar):
                  shutil.copytree(ar, os.path.join(fallback_dir,'allure-results'), dirs_exist_ok=True)
              if os.path.isdir(sr):
                  shutil.copytree(sr, os.path.join(fallback_dir,'surefire-reports'), dirs_exist_ok=True)
              with open(os.path.join(fallback_dir,'README.txt'),'w',encoding='utf-8') as f:
                  f.write('Allure HTML was not generated. This zip contains raw allure-results and surefire-reports.')
          with zipfile.ZipFile(zip_path,'w',zipfile.ZIP_DEFLATED) as z:
              base=report_dir
              for root,_,files in os.walk(base):
                  for fn in files:
                      p=os.path.join(root,fn)
                      z.write(p, os.path.relpath(p, base))
          PY

      - name: Upload Allure HTML as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: |
            ${{ env.REPORT_DIR }}/**
            allure-report.zip
          retention-days: 14

      - name: Send email with Allure report
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: ${{ secrets.SMTP_SECURE }}
          from: ${{ secrets.SMTP_FROM != '' && secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
          to: ${{ secrets.SMTP_TO }}
          subject: "Photopixels BE nightly API tests â€” ${{ steps.summary.outputs.verdict }}"
          html_body: |
            <p>Hello team,</p>
            <p>The nightly run finished with status: <b>${{ steps.summary.outputs.verdict }}</b>.</p>

            <p>Summary:</p>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse:collapse;">
              <tr>
                <th>Total</th>
                <th>Passed</th>
                <th>Failed</th>
                <th>Broken</th>
                <th>Skipped</th>
              </tr>
              <tr>
                <td align="center">${{ steps.summary.outputs.total || '0' }}</td>
                <td align="center" style="color:green;"><b>${{ steps.summary.outputs.passed || '0' }}</b></td>
                <td align="center" style="color:red;"><b>${{ steps.summary.outputs.failed || '0' }}</b></td>
                <td align="center" style="color:#b10;"><b>${{ steps.summary.outputs.broken || '0' }}</b></td>
                <td align="center" style="color:gray;"><b>${{ steps.summary.outputs.skipped || '0' }}</b></td>
              </tr>
            </table>

            <p>Failed tests:</p>
            ${{ steps.summary.outputs.failed_table_html }}

            <p>
              <ul>
                <li>Workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">link</a></li>
                <li>Artifacts: <i>be-api-test-artifacts</i> and <i>allure-html-report</i></li>
              </ul>
            </p>
            <p>The attached file contains the report. If Allure HTML could not be generated, the zip contains raw <code>allure-results</code> and <code>surefire-reports</code>.</p>
            <p>Best regards,<br/>CI</p>
          attachments: allure-report.zip
