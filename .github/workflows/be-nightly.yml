name: Photopixels BE nightly API tests
run-name: "Nightly BE API — ${{ github.ref_name }} #${{ github.run_number }}"

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 14 * * *'

env:
  AUTOMATION_REPO_PATH: automation
  BACKEND_REPO_PATH: backend
  COMPOSE_FILE: ${{ github.workspace }}/automation/utils/docker-compose.yml
  BACKEND_TAG: scalefocusad/photopixels-backend-net:automation
  AUTOMATION_TAG: scalefocusad/photopixels-automated-tests:automation

jobs:
  build-be:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-backend-net
          submodules: recursive
          fetch-depth: 0
          path: ${{ env.BACKEND_REPO_PATH }}
      - name: Build docker image (BE)
        working-directory: ${{ env.BACKEND_REPO_PATH }}
        run: |
          docker build \
            --no-cache \
            --build-arg VERSION="1.0.0" \
            --build-arg VERSION_SUFFIX="" \
            -t "$BACKEND_TAG" \
            -f ./src/SF.PhotoPixels.API/Dockerfile .

  build-automation:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Build docker image (automation tests)
        working-directory: ${{ env.AUTOMATION_REPO_PATH }}
        run: |
          docker build --no-cache -f ./Dockerfile -t "$AUTOMATION_TAG" .

  automation:
    runs-on: self-hosted
    needs: [build-be, build-automation]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Start environment (backend + db only)
        run: |
          docker compose -f "${COMPOSE_FILE}" pull backend db || true
          docker compose -f "${COMPOSE_FILE}" up -d backend db
      - name: Run API tests
        id: run-tests
        continue-on-error: true
        run: |
          docker run -i --name api-tests \
            -e BASE_URI="http://backend:8080/" \
            -e SUITE_NAME="api" \
            --network utils_sf-photos-net \
            "$AUTOMATION_TAG"
      - name: Collect test artifacts
        if: always()
        run: |
          set -e
          mkdir -p "${GITHUB_WORKSPACE}/test-artifacts"
          docker cp api-tests:/app/target/surefire-reports "${GITHUB_WORKSPACE}/test-artifacts/surefire-reports" || true
          docker cp api-tests:/app/target/allure-results   "${GITHUB_WORKSPACE}/test-artifacts/allure-results"   || true
      - name: Upload raw artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: be-api-test-artifacts
          path: test-artifacts/**
          if-no-files-found: warn
          retention-days: 14
      - name: Cleanup
        if: always()
        run: |
          docker rm -f api-tests || true
          docker compose -f "$COMPOSE_FILE" down -v || true

  allure-report-email:
    runs-on: self-hosted
    needs: [automation]
    if: always()
    steps:
      - name: Set workspace-scoped paths (visible in action container)
        run: |
          echo "ART_DIR=${GITHUB_WORKSPACE}/ci-artifacts" >> "$GITHUB_ENV"
          echo "REPORT_DIR=${GITHUB_WORKSPACE}/ci-allure-report" >> "$GITHUB_ENV"
          mkdir -p "${GITHUB_WORKSPACE}/ci-artifacts" "${GITHUB_WORKSPACE}/ci-allure-report"

      - name: Download test artifacts (into workspace)
        uses: actions/download-artifact@v4
        with:
          name: be-api-test-artifacts
          path: ${{ env.ART_DIR }}

      - name: Verify Allure inputs
        run: |
          echo "=== ART_DIR tree ==="; ls -la "$ART_DIR" || true
          echo "=== surefire-reports ==="; ls -la "$ART_DIR/surefire-reports" || true
          echo "=== allure-results ==="; ls -la "$ART_DIR/allure-results" || true
          python3 - <<'PY'
import os, glob
base=os.environ['ART_DIR']; res=os.path.join(base,'allure-results')
files=glob.glob(os.path.join(res,'*-result.json'))
print("Allure *-result.json count:", len(files))
for p in sorted(files)[:5]:
    print("  ", os.path.basename(p))
PY

      - name: Generate Allure report (paths under $GITHUB_WORKSPACE)
        id: gen
        continue-on-error: true
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: ${{ env.ART_DIR }}/allure-results
          allure_report: ${{ env.REPORT_DIR }}

      - name: Verify Allure output
        run: |
          echo "=== REPORT_DIR tree ==="; ls -la "$REPORT_DIR" || true
          echo "=== widgets ==="; ls -la "$REPORT_DIR/widgets" || true
          test -f "$REPORT_DIR/index.html" && echo "index.html: OK" || echo "index.html: MISSING"

      - name: Extract summary (Allure or fallback to surefire)
        id: summary
        shell: bash
        run: |
          python3 - <<'PY'
import os, json, xml.etree.ElementTree as ET
report_dir = os.environ['REPORT_DIR']
art_dir = os.environ['ART_DIR']
summary_path = os.path.join(report_dir,'widgets','summary.json')
passed=failed=broken=skipped=total=0
if os.path.exists(summary_path):
    with open(summary_path,'r',encoding='utf-8') as f:
        data=json.load(f)
        stat=data.get('statistic',{})
        passed=int(stat.get('passed',0))
        failed=int(stat.get('failed',0))
        broken=int(stat.get('broken',0))
        skipped=int(stat.get('skipped',0))
        total=int(stat.get('total',0))
else:
    surefire = os.path.join(art_dir,'surefire-reports')
    if os.path.isdir(surefire):
        for fn in os.listdir(surefire):
            if fn.startswith('TEST-') and fn.endswith('.xml'):
                try:
                    tree = ET.parse(os.path.join(surefire,fn))
                    root = tree.getroot()
                    tests = int(root.attrib.get('tests', 0))
                    failures = int(root.attrib.get('failures', 0))
                    errors = int(root.attrib.get('errors', 0))
                    skipped_i = int(root.attrib.get('skipped', 0))
                    total += tests
                    failed += failures
                    broken += errors
                    skipped += skipped_i
                except Exception:
                    pass
        passed = max(total - failed - broken - skipped, 0)
verdict = "FAILED" if (failed + broken) > 0 else "PASSED"
with open(os.environ['GITHUB_OUTPUT'],'a') as out:
    out.write(f"passed={passed}\nfailed={failed}\nbroken={broken}\nskipped={skipped}\n")
    out.write(f"total={total}\nverdict={verdict}\n")
PY

      - name: Zip Allure report for artifact convenience (only if HTML exists)
        if: always()
        shell: bash
        run: |
          if [ -f "$REPORT_DIR/index.html" ]; then
            python3 - <<'PY'
import os, zipfile
report_dir=os.environ['REPORT_DIR']
zip_path='allure-report.zip'
with zipfile.ZipFile(zip_path,'w',zipfile.ZIP_DEFLATED) as z:
    for root,_,files in os.walk(report_dir):
        for fn in files:
            p=os.path.join(root,fn)
            z.write(p, os.path.relpath(p, report_dir))
PY
          else
            echo "No HTML to zip, skipping zip step."
          fi

      - name: Conditionally upload Allure HTML (skip if missing)
        run: |
          if [ -f "$REPORT_DIR/index.html" ]; then
            echo "UPLOAD_HTML=true" >> "$GITHUB_ENV"
          else
            echo "UPLOAD_HTML=false" >> "$GITHUB_ENV"
          fi
      - uses: actions/upload-artifact@v4
        if: env.UPLOAD_HTML == 'true'
        with:
          name: allure-html-report
          path: |
            ${{ env.REPORT_DIR }}/**
            allure-report.zip
          retention-days: 14

      - name: Send email with Allure report (link only, no attachment)
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: ${{ secrets.SMTP_SECURE }}
          from: ${{ secrets.SMTP_FROM != '' && secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
          to: ${{ secrets.SMTP_TO }}
          subject: "Photopixels BE nightly API tests — ${{ steps.summary.outputs.verdict || 'PASSED' }}"
          html_body: |
            <p>Hello team,</p>
            <p>The nightly run finished with status: <b>${{ steps.summary.outputs.verdict || 'PASSED' }}</b>.</p>

            <p>Summary:</p>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse:collapse;">
              <tr>
                <th>Total</th>
                <th>Passed</th>
                <th>Failed</th>
                <th>Broken</th>
                <th>Skipped</th>
              </tr>
              <tr>
                <td align="center">${{ steps.summary.outputs.total || '0' }}</td>
                <td align="center" style="color:green;"><b>${{ steps.summary.outputs.passed || '0' }}</b></td>
                <td align="center" style="color:red;"><b>${{ steps.summary.outputs.failed || '0' }}</b></td>
                <td align="center" style="color:#b10;"><b>${{ steps.summary.outputs.broken || '0' }}</b></td>
                <td align="center" style="color:gray;"><b>${{ steps.summary.outputs.skipped || '0' }}</b></td>
              </tr>
            </table>

            <p>
              <ul>
                <li>Workflow &amp; Artifacts: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">open</a></li>
                <li>Allure HTML artifact (if generated): <i>allure-html-report</i></li>
                <li>Raw results (always): <i>be-api-test-artifacts</i></li>
              </ul>
            </p>

            <p>Best regards,<br/>CI</p>
