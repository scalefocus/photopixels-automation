name: Photopixels automated tests

on:
  workflow_dispatch:

env:
  AUTOMATION_REPO_PATH: automation
  BACKEND_REPO_PATH: backend
  FRONTEND_REPO_PATH: frontend
  COMPOSE_FILE: ./utils/docker-compose.yml
  FRONTEND_TAG: scalefocusad/photopixels-web:automation
  BACKEND_TAG: scalefocusad/photopixels-backend-net:automation
  AUTOMATION_TAG: scalefocusad/photopixels-automated-tests:automation

jobs:
  build-fe:
    runs-on: self-hosted
    needs: [ build-be ]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-web
          submodules: recursive
          fetch-depth: 0
          path: ${{ env.FRONTEND_REPO_PATH }}
      - name: Build docker image
        working-directory: ${{ env.FRONTEND_REPO_PATH }}
        run: |
          docker build --no-cache -t $FRONTEND_TAG -f ./Dockerfile .

  build-be:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          repository: scalefocus/photopixels-backend-net
          submodules: recursive
          fetch-depth: 0
          path: ${{ env.BACKEND_REPO_PATH }}

      - name: Build docker image
        working-directory: ${{ env.BACKEND_REPO_PATH }}
        run: |
          docker build \
           --no-cache \
           --build-arg VERSION="1.0.0" \
           --build-arg VERSION_SUFFIX="" \
           -t $BACKEND_TAG \
           -f ./src/SF.PhotoPixels.API/Dockerfile .

  build-automation:
    runs-on: self-hosted
    needs: [ build-fe ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Build docker image
        working-directory: ${{ env.AUTOMATION_REPO_PATH }}
        run: docker build --no-cache -f ./Dockerfile -t "$AUTOMATION_TAG" .

  automation:
    runs-on: self-hosted
    needs: [ build-fe, build-be, build-automation ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.AUTOMATION_REPO_PATH }}
      - name: Start environment
        run: |
          chmod +x "${GITHUB_WORKSPACE}/utils/create-environment.sh"
          ${GITHUB_WORKSPACE}/utils/create-environment.sh ${COMPOSE_FILE}

      - name: Get Mobile APK
        id: get_url
        run: |
          url=$(curl -fsSL "https://api.github.com/repos/scalefocus/photopixels-android/releases/latest" \
            | python - <<'PY'
          import sys, json
          j = json.load(sys.stdin)
          print(next(a["browser_download_url"] for a in j.get("assets", []) if a["name"].endswith("-release.apk")))
          PY
          )
          echo "URL: $url"

      - name: Run Api tests
        id: api_tests
        continue-on-error: true
        run: |
          docker run -i --rm \
          -e BASE_URI="http://backend:8080/" \
          -e WEB_URI="http://selenium-hub:4444/" \
          -e SUITE_NAME="api" \
          --network utils_sf-photos-net \
          $AUTOMATION_TAG

      - name: Run Web tests
        id: web_tests
        continue-on-error: true
        run: |
          docker run -i --rm \
          -e BASE_URI="http://backend:8080/api" \
          -e WEB_URI="http://selenium-hub:4444/" \
          -e SUITE_NAME="web" \
          --network utils_sf-photos-net \
          $AUTOMATION_TAG

      - name: Run Mobile tests
        id: mobile_tests
        continue-on-error: true
        run: |
          docker run -i --rm \
          -e BASE_URI="http://backend:8080/" \
          -e WEB_URI="http://selenium-hub:4444/" \
          -ะต appiumServiceHost="selenium-hub" \
          -ะต appiumPort="4444" \
          -e SUITE_NAME="mobile" \
          -e applicationName="$APP_PATH" \
          -e appPackage="io.photopixels.app" \
          -e appActivity="io.photopixels.app.MainActivity" \
          --network utils_sf-photos-net \
          $AUTOMATION_TAG

      - name: Cleanup environment
        if: always()
        run: docker compose -f $COMPOSE_FILE down --volumes --rmi all --remove-orphans
